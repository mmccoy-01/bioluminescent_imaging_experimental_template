---
title: "title"
author: "author"
logo: "https://www.anelto.com/wp-content/uploads/2021/08/placeholder-image.png"
nav-buttons:
- icon: github
  href: https://github.com/mmccoy-01/bioluminescent_imaging_experimental_template
- icon: linkedin
  href: https://www.linkedin.com/in/themichaelmccoy
format: 
  dashboard:
    orientation: columns
    theme:
      light: cerulean
      dark: darkly
server: shiny
---

```{r Setup}
#| context: setup

# Set the working directory to the location of the current script. Use this only when running code chunks interactively, not when rendering the entire document.
#setwd(dirname(rstudioapi::getSourceEditorContext()$path))

# Do not run this code or update the renv.lock file, as it reflects the original state when the code was written and executed.
#renv::snapshot(lockfile = "renv.lock")

# Do not run this code or update the manifest.json file, as it reflects the original state when the code was written and executed.
#rsconnect::writeManifest()

# Define a list of required packages for the dashboard.
pkg_list <- c(
  "knitr", "tidyverse", "shiny", "lubridate", "magick", "rsvg", "DT",
  "scales", "plotly", "survival", "survminer", "jmv", "lme4", "emmeans", "gtsummary"
)

# Function to install and load packages.
# For each package in the list:
# - Check if the package is already installed.
# - If not installed, install it along with its dependencies.
# - Load the package into the R session.
load_packages <- function(pkg_list) {
  for (pkg in pkg_list) {
    if (!require(pkg, character.only = TRUE)) {
      install.packages(pkg, dependencies = TRUE)
      library(pkg, character.only = TRUE)
    }
  }
}

# Call the function to ensure all required packages are installed and loaded.
load_packages(pkg_list)

# Initially, `best_seed` is set to `NULL` to allow the first randomization to identify the optimal seed. 
# Once the best seed is determined, update `best_seed` to that value to prevent unnecessary repeated randomizations of the `trt` assignments in subsequent runs.
best_seed <- NULL

# Define a list of mice IDs to include in the study by excluding specific IDs.
filtered_mice <- setdiff(1:30, c(1, 5, 10))  # Exclude mice 1, 5, 10.

# Create a named vector for treatment labels, linking each label to its corresponding treatment group.
labels <- c("0" = "Non-study", 
            "1" = "A", 
            "2" = "B", 
            "3" = "C", 
            "4" = "D")

# Define a color palette for each treatment group and link it to the labels.
colors <- c("#000000", "#D32F2F", "#2E7D32", "#7B1FA2", "#BDBDBD")

# Name the colors vector using the labels.
pal <- setNames(colors, labels)

# Define plot shapes for each treatment group and link them to the labels.
shapes <- c("square",           # Non-study (0)
            "circle",           # A (1)
            "triangle-up",      # B (2)
            "diamond",          # C (3)
            "cross")            # D (4)

# Name the shapes vector using the labels.
shapes <- setNames(shapes, labels)

# Provide a link to an organization logo (used in Treatment Plot Shiny App).
src <- "https://www.anelto.com/wp-content/uploads/2021/08/placeholder-image.png"

# Option to save statistical output (Descriptives and Mixed-Effects Model results) as a .txt file, "y" or "n".
# Default is "n" to prevent overwriting the file when running the .qmd repeatedly.
save_output <- "n"
```

```{r Data Pre-Processing}
# Combine all weeks' imaging data into a single data frame ('processed_data') 
# by processing individual CSV files and merging them with raw data.

# Read the raw data file ('raw_data.csv') into a data frame.
raw_data <- read.csv("data/raw/raw_data.csv")

# Set the file path for processed imaging data.
file_path <- "data/imaging/processed/"

# Get a list of all CSV files in the directory, matching the pattern for imaging data.
csv_files <- list.files(file_path, pattern = "\\.csv$", full.names = TRUE)

# Define a function to read, process, and assign each CSV file as a data frame.
read_process_save_csv <- function(file) {
  # Extract the file name (without extension) to use as an identifier.
  file_name <- tools::file_path_sans_ext(basename(file))
  
  # Assume the file name represents the imaging_date (formatted as yyyy-mm-dd).
  imaging_date <- file_name
  
  # Read the CSV file into a data frame, preserving original column names.
  df <- read.csv(file, check.names = FALSE)
  
  # Rename the fourth column to 'avg_radiance' to handle any issues with special characters.
  colnames(df)[4] <- "avg_radiance"
  
  # Remove unnecessary columns that won't be used for analysis.
  columns_to_remove <- c("Image Number", "ROI", "Image Layer", 
                         "Stdev Radiance", "Min Radiance", "Max Radiance")
  df <- df[, !colnames(df) %in% columns_to_remove]
  
  # Standardize column names for consistency.
  colnames(df)[colnames(df) == "ROI Label"] <- "id"
  colnames(df)[colnames(df) == "Total Flux [p/s]"] <- "total_flux"
  
  # Add an 'imaging_date' column derived from the file name, ensuring it is recognized as a date.
  df <- df %>%
    mutate(imaging_date = ymd(imaging_date))
  
  # Assign the processed data frame to a variable with the same name as the CSV file (e.g., "2024-01-01").
  assign(file_name, df, envir = .GlobalEnv)
}

# Apply the 'read_process_save_csv' function to all CSV files, processing and saving each as a data frame.
invisible(lapply(csv_files, read_process_save_csv))

# Combine all processed weekly data frames into a single data frame ('imaging_data') using 'bind_rows()'.
# The names of the data frames correspond to the file names derived earlier.
invisible(imaging_data <- do.call(bind_rows, mget(tools::file_path_sans_ext(basename(csv_files)), envir = .GlobalEnv)))

# Arrange the combined 'imaging_data' by 'imaging_date' and then by 'id' for a logical order.
imaging_data <- imaging_data %>%
  arrange(imaging_date, id)

# Merge the 'imaging_data' with 'raw_data' on the 'id' column to create 'processed_data'.
processed_data <- left_join(raw_data, imaging_data, by = "id")

# Save the final 'processed_data' data frame as a CSV file for future use.
write_csv(processed_data, file = "data/processed/processed_data.csv")
```

```{r Treatment Assignment}
# Load processed data
processed_data <- read.csv("data/processed/processed_data.csv")

# Filter mice
filtered_data <- processed_data %>%
  filter(imaging_date == engraftment_imaging_date & id %in% filtered_mice)

# Determine the number of arms and mice per arm
num_arms <- length(labels) - 1  # Exclude the "Non-study" group
num_per_arm <- nrow(filtered_data) / num_arms

# Ensure mice_per_arm is an integer
if (num_per_arm %% 1 != 0) {
  stop("The number of mice per arm is not an integer. Check your input data or labels.")
}
num_per_arm <- as.integer(num_per_arm)

# Define the assign_groups function
assign_groups <- function(data, num_arms, num_per_arm) {
  # Initialize group assignments and mean flux storage
  trt <- integer(nrow(data))
  mean_total_flux <- data.frame(Group = 1:num_arms, Mean_Total_Flux = numeric(num_arms))
  
  # Shuffle data to randomize assignments
  data <- data[sample(nrow(data)), ]
  
  for (i in seq_len(num_arms)) {
    # Assign data to the current group
    group_data <- data[((i - 1) * num_per_arm + 1):(i * num_per_arm), ]
    
    # Calculate mean total_flux for the group
    mean_total_flux$Mean_Total_Flux[i] <- mean(group_data$total_flux)
    
    # Assign group number
    trt[((i - 1) * num_per_arm + 1):(i * num_per_arm)] <- i
  }
  
  # Add treatment assignments to the data frame
  data$trt <- trt
  
  return(list(Data = data, Mean_Total_Flux = mean_total_flux))
}

# Check if `best_seed` is already defined
if (is.null(best_seed)) {
  # Initialize variables to find the best random seed
  best_variability <- Inf
  num_seeds <- 1000  # Adjust this as needed

  # Loop through seeds to minimize variability
  for (seed in seq_len(num_seeds)) {
    set.seed(seed)
    
    # Assign groups
    result <- assign_groups(filtered_data, num_arms, num_per_arm)
    
    # Calculate variability across groups
    variability <- sd(result$Mean_Total_Flux$Mean_Total_Flux)
    
    # Update the best seed if variability is improved
    if (variability < best_variability) {
      best_variability <- variability
      best_seed <- seed
    }
  }
} else {
}

# Use the best seed (either predefined or found) for final group assignment
set.seed(best_seed)
result <- assign_groups(filtered_data, num_arms, num_per_arm)

# Update processed_data with group assignments
processed_data <- processed_data %>%
  left_join(result$Data %>% select(id, trt), by = "id") %>%
  mutate(
    trt = factor(ifelse(is.na(trt), "0", as.character(trt)), levels = names(labels), labels = labels),
    trt_factor = as.numeric(as.character(trt))
  ) %>%
  relocate(trt, .before = trt_injection_vial)

# If manually assigning mice, follow format below:
# Ensure IDs are mapped correctly to treatment groups
#processed_data <- processed_data %>%
  #mutate(trt_factor = as.numeric(case_when(
    #id %in% c(16, 19, 27, 28) ~ 0,
    #id %in% c(17, 18, 23, 25, 26) ~ 1,
    #id %in% c(20, 21, 22, 24, 29) ~ 2,
    #id %in% c(11, 12, 13, 14, 15) ~ 3,
    #id %in% c(1, 2, 3, 4, 5) ~ 4,
    #id %in% c(6, 7, 8, 9, 10) ~ 5,
    #TRUE ~ NA_real_  # Ensure no missing values
  #))) %>%
  #mutate(trt = case_when(
    #id %in% c(16, 19, 27, 28) ~ "0",  # Ensure exact match with `labels`
    #id %in% c(17, 18, 23, 25, 26) ~ "1",
    #id %in% c(20, 21, 22, 24, 29) ~ "2",
    #id %in% c(11, 12, 13, 14, 15) ~ "3",
    #id %in% c(1, 2, 3, 4, 5) ~ "4",
    #id %in% c(6, 7, 8, 9, 10) ~ "5",
    #TRUE ~ NA_character_
  #)) %>%
  #mutate(trt = factor(trt, levels = names(labels), labels = labels))  # Correct factor conversion

# Write the updated processed_data to a CSV file
write_csv(processed_data, file = "data/processed/processed_data.csv")
```

# Data

## Column

### {.toolbar}

```{r Treatment Plot Sidebar}
selectInput("pdx", "PDX:",
            choices = unique(processed_data$tumor_injection),
            selected = unique(processed_data$tumor_injection)[1])
selectInput("y_axis", "Y-axis:",
            choices = c("Flux" = "total_flux", "Radiance" = "avg_radiance"),
            selected = "total_flux")
checkboxInput("include_non_study", "Include non-study mice", value = FALSE)
selectInput("calculation_type", "Calculation Type:",
            choices = c("Mean", "Median", "Individual"),
            selected = "Mean")
```

### Row {.tabset}

```{r Treatment Plot Shiny App Server}
#| context: server

# Load data
processed_data <- read.csv("data/processed/processed_data.csv") %>%
  mutate(days_from_trt = floor(as.numeric(difftime(imaging_date, as.Date(trt_injection_date[1], format = "%Y-%m-%d"), units = "days")))) %>% 
  relocate(days_from_trt, .before = imaging_date)

# Create reactive dataset based on PDX and toggle selection
selected_data <- reactive({
  data <- processed_data[processed_data$tumor_injection == input$pdx, ]
  if (!input$include_non_study) {
    data <- data[data$trt != "Non-study", ]
  }
  data
})

# Render Plotly scatter plot
output$scatter_plot <- renderPlotly({
  y_axis_title <- if (input$y_axis == "total_flux") "Flux [p/s]" else "Radiance [p/s/cm^2/sr]"
  y_axis_label <- if (input$y_axis == "total_flux") "Flux" else "Radiance"

  # Calculate values based on the selected calculation type
  if (input$calculation_type == "Individual") {
    p <- selected_data() %>%
      mutate(trt = reorder(trt, trt_factor)) %>%
      group_by(trt, id) %>%
      plot_ly(x = ~days_from_trt + runif(length(days_from_trt), -0.3, 0.3), y = ~get(input$y_axis),
              type = 'scatter', mode = 'lines+markers',
              color = ~trt, colors = pal,
              symbol = ~trt, symbols = shapes,
              marker = list(size = 10),
              legendgroup = ~trt,
              name = ~trt,
              hoverinfo = "text",
              text = ~paste("Imaging Date: ", imaging_date, "<br>ID: ", id, "<br>", y_axis_label, ": ", sprintf("%.2e", get(input$y_axis)),
                            "<br>Tumor inj quality: ", tumor_injection_quality,
                            "<br>Treatment inj quality: ", trt_injection_quality
                            )) %>%
      layout(
        yaxis = list(
          type = "log",
          title = y_axis_title
        ),
        xaxis = list(
          type = "linear",
          title = "Days from Treatment",
          tickmode = "array",
          tickvals = c(unique(selected_data()$days_from_trt), as.numeric(as.Date(processed_data$tumor_injection_date[1], format = "%Y-%m-%d") - as.Date(processed_data$trt_injection_date[1], format = "%Y-%m-%d"))),
          ticktext = c(as.character(unique(selected_data()$days_from_trt)),
                       paste(as.numeric(as.Date(processed_data$tumor_injection_date[1], format = "%Y-%m-%d") - as.Date(processed_data$trt_injection_date[1], format = "%Y-%m-%d"))))
        ),
        showlegend = TRUE,
        legend = list(orientation = "h",
                      x = 0.5,
                      xanchor = "center",
                      y = -0.22,
                      title = "Treatment"
                      ),
        images = list(
          source = src,
          xref = "paper",
          yref = "paper",
          x = 0,
          y = 1,
          sizex = 0.2,
          sizey = 0.2,
          opacity = 0.8
        ),
        shapes = list(
          list(type = "line", y0 = 0, y1 = 1, yref = "paper", x0 = as.numeric(as.Date(processed_data$tumor_injection_date[1], format = "%Y-%m-%d") - as.Date(processed_data$trt_injection_date[1], format = "%Y-%m-%d")), x1 = as.numeric(as.Date(processed_data$tumor_injection_date[1], format = "%Y-%m-%d") - as.Date(processed_data$trt_injection_date[1], format = "%Y-%m-%d")), line = list(color = "black", dash = "dot"))
        ),
        annotations = list(
          list(
            x = 1,  # Right side of the plot
            y = 1,  # Top of the plot
            xref = "paper",
            yref = "paper",
            text = paste("Tumor Injection:", input$pdx),
            showarrow = FALSE,
            xanchor = "right",
            yanchor = "top",
            font = list(size = 14, color = "black")
          )
        )
      ) %>%
      config(scrollZoom = TRUE, modeBarButtonsToAdd = list('drawopenpath'))
  } else {
    data_summary <- selected_data() %>%
      mutate(trt = reorder(trt, trt_factor)) %>%
      group_by(days_from_trt, trt, imaging_date) %>%
      summarise(y_value = ifelse(input$calculation_type == "Mean", mean(get(input$y_axis)),
                                 median(get(input$y_axis))))

    p <- data_summary %>%
      group_by(trt) %>%
      plot_ly(x = ~days_from_trt + runif(length(days_from_trt), -0.3, 0.3), y = ~y_value,
              type = 'scatter', mode = 'lines+markers',
              color = ~trt, colors = pal,
              symbol = ~trt, symbols = shapes,
              marker = list(size = 10),
              legendgroup = ~trt,
              name = ~trt,
              hoverinfo = "text",
              text = ~paste("Imaging Date: ", imaging_date, "<br>", y_axis_label, ": ", sprintf("%.2e", y_value))) %>%
      layout(
        yaxis = list(
          type = "log",
          title = y_axis_title
        ),
        xaxis = list(
          type = "linear",
          title = "Days from Treatment",
          tickmode = "array",
          tickvals = c(unique(data_summary$days_from_trt), as.numeric(as.Date(processed_data$tumor_injection_date[1], format = "%Y-%m-%d") - as.Date(processed_data$trt_injection_date[1], format = "%Y-%m-%d"))),
          ticktext = c(as.character(unique(data_summary$days_from_trt)),
                       paste(as.numeric(as.Date(processed_data$tumor_injection_date[1], format = "%Y-%m-%d") - as.Date(processed_data$trt_injection_date[1], format = "%Y-%m-%d"))))
        ),
        showlegend = TRUE,
        legend = list(orientation = "h",
                      x = 0.5,
                      xanchor = "center",
                      y = -0.22,
                      title = "Treatment"
                      ),
        images = list(
          source = src,
          xref = "paper",
          yref = "paper",
          x = 0,
          y = 1,
          sizex = 0.2,
          sizey = 0.2,
          opacity = 0.8
        ),
        shapes = list(
          list(type = "line", y0 = 0, y1 = 1, yref = "paper", x0 = as.numeric(as.Date(processed_data$tumor_injection_date[1], format = "%Y-%m-%d") - as.Date(processed_data$trt_injection_date[1], format = "%Y-%m-%d")), x1 = as.numeric(as.Date(processed_data$tumor_injection_date[1], format = "%Y-%m-%d") - as.Date(processed_data$trt_injection_date[1], format = "%Y-%m-%d")), line = list(color = "black", dash = "dot"))
        ),
        annotations = list(
          list(
            x = 1,  
            y = 1,  
            xref = "paper",
            yref = "paper",
            text = paste("Tumor Injection:", input$pdx),
            showarrow = FALSE,
            xanchor = "right",
            yanchor = "top",
            font = list(size = 14, color = "black")
          )
        )
      ) %>%
      config(scrollZoom = TRUE, modeBarButtonsToAdd = list('drawopenpath'))
  }

  p
})

# Render data table
output$data <- renderTable({
  selected_data()
})
```

```{r Treatment Plot Output}
#| title: "Treatment Plot"

plotlyOutput("scatter_plot")
```

```{r Kaplan-Meier Curve}
#| title: "Kaplan-Meier Curve"
#| results: asis

# Load data
processed_data <- read.csv("data/processed/processed_data.csv") %>%
  distinct(id, trt, death_date, trt_injection_date) %>%
  mutate(
    death_date = as.Date(death_date, format = "%Y-%m-%d"),
    trt_injection_date = as.Date(trt_injection_date, format = "%Y-%m-%d"),
    event = ifelse(!is.na(death_date), 1, 0),
    time = ifelse(!is.na(death_date), 
                  as.numeric(difftime(death_date, trt_injection_date, units = "days")), 
                  as.numeric(difftime(Sys.Date(), trt_injection_date, units = "days")))
  )

# Take absolute value of time to ensure positive values
processed_data$time <- abs(processed_data$time)

# Fit the survival curve
kmcurve <- survfit(Surv(time, event) ~ trt, data = processed_data)

# Sort labels alphabetically
sorted_labels <- sort(labels)

# Match the sorted labels to the colors
sorted_colors <- colors[match(sorted_labels, labels)]

#  Create survival plot
ggsurvplot(kmcurve, data = processed_data,
                xlim = c(0, 60),
                break.x.by = 7,
                pval = FALSE,
                risk.table = TRUE,
                risk.table.height = 0.4,
                surv.scale = "percent",
                title = "",
                risk.table.title = "",
                legend.title = "",
                fill = processed_data$trt,
                palette = sorted_colors)

# Survival by Mouse and by Treatment
# Calculate survival in days
processed_data$survival_days <- as.numeric(difftime(as.Date(processed_data$death_date), 
                                                    as.Date(processed_data$trt_injection_date), 
                                                    units = "days"))

# Function to create survival table
create_survival_table <- function(data, group_by_trt = FALSE) {
  if (group_by_trt) {
    table_data <- data %>%
      group_by(trt) %>%
      summarise(
        mean_survival_days = mean(survival_days, na.rm = TRUE),
        median_survival_days = median(survival_days, na.rm = TRUE),
        min_survival_days = min(survival_days, na.rm = TRUE),
        max_survival_days = max(survival_days, na.rm = TRUE)
      )
  } else {
    table_data <- data %>%
      distinct(id, .keep_all = TRUE) %>%
      select(id, trt, survival_days)  # Include trt column for survival by mouse
  }
  
  return(table_data)
}

# Create survival table by group
survival_by_group <- create_survival_table(processed_data, group_by_trt = TRUE)

# Create survival table by ID
survival_by_id <- create_survival_table(processed_data, group_by_trt = FALSE)

# Print survival tables
cat("Survival by Group:\n")
kable(survival_by_group, format = "markdown")
cat("\n\n")
cat("Survival by ID:\n")
kable(survival_by_id, format = "markdown")

# Get the summary table
summary_table <- summary(kmcurve, times = seq(0, 60, 7))

# Convert summary table to a data.frame
summary_df <- as.data.frame(summary_table$table)

# Print the formatted summary table using kable
kable(summary_df, digits = 3, caption = "Kaplan-Meier Survival Curve Summary")
```

```{r Spleen Counts}
#| title: "Spleen Counts"

# Load the processed data
processed_data <- read.csv("data/processed/processed_data.csv") %>%
  distinct(id, trt, spleen_total_live_cell_count, number_of_spleen_cryovials, cryovial_spleen_cell_total, spleen_cell_viability, manner_of_death, death_date)

# Filter to keep only rows with non-zero spleen_total_live_cell_count
filtered_data <- processed_data %>%
  filter(spleen_total_live_cell_count > 0)

# Create the Plotly plot
plot <- plot_ly(
  data = filtered_data,
  x = ~id,
  y = ~spleen_total_live_cell_count,
  type = "bar",
  color = ~trt, 
  colors = pal,
  marker = list(line = list(width = 2)),  # Adjust the width of the bars
  hoverinfo = "text",
  text = ~paste(
    "ID: ", id,
    "<br>Total Live Spleen Count:", sprintf("%.2e", spleen_total_live_cell_count),
    "<br>Viability:", spleen_cell_viability,
    "<br>", number_of_spleen_cryovials, "cryovial(s) at", sprintf("%.2e", cryovial_spleen_cell_total), " cells each",
    "<br>Death date:", death_date,
    "<br>Manner of death:", manner_of_death
  )
) %>%
  layout(
    xaxis = list(
      title = "Mouse ID",
      tickvals = filtered_data$id,  # Show ticks only for IDs in filtered data
      ticktext = filtered_data$id   # Show tick labels corresponding to the IDs
    ),
    yaxis = list(title = "Spleen Total Live Cell Count"),
    images = list(
      source = src,  # Ensure 'src' is defined and points to a valid image
      xref = "paper",
      yref = "paper",
      x = 0,
      y = 1,
      sizex = 0.2,
      sizey = 0.2,
      opacity = 0.8
    )
  ) %>%
  config(scrollZoom = TRUE, modeBarButtonsToAdd = list('drawopenpath'))

# Display the Plotly plot
plot
```

```{r Marrow Counts}
#| title: "Marrow Counts"

# Load the processed data
processed_data <- read.csv("data/processed/processed_data.csv") %>%
  distinct(id, trt, marrow_total_live_cell_count, number_of_marrow_cryovials, cryovial_marrow_cell_total, marrow_cell_viability, manner_of_death, death_date)

# Filter to keep only rows with non-zero spleen_total_live_cell_count
filtered_data <- processed_data %>%
  filter(marrow_total_live_cell_count > 0)

# Create the Plotly plot
plot <- plot_ly(
  data = filtered_data,
  x = ~id,
  y = ~marrow_total_live_cell_count,
  type = "bar",
  color = ~trt, 
  colors = pal,
  marker = list(line = list(width = 2)),  # Adjust the width of the bars
  hoverinfo = "text",
  text = ~paste(
    "ID: ", id,
    "<br>Total Live Marrow Count:", sprintf("%.2e", marrow_total_live_cell_count),
    "<br>Viability:", marrow_cell_viability,
    "<br>", number_of_marrow_cryovials, "cryovial(s) at", sprintf("%.2e", cryovial_marrow_cell_total), " cells each",
    "<br>Death date:", death_date,
    "<br>Manner of death:", manner_of_death
  )
) %>%
  layout(
    xaxis = list(
      title = "Mouse ID",
      tickvals = filtered_data$id,  # Show ticks only for IDs in filtered data
      ticktext = filtered_data$id   # Show tick labels corresponding to the IDs
    ),
    yaxis = list(title = "Marrow Total Live Cell Count"),
    images = list(
      source = src,  # Ensure 'src' is defined and points to a valid image
      xref = "paper",
      yref = "paper",
      x = 0,
      y = 1,
      sizex = 0.2,
      sizey = 0.2,
      opacity = 0.8
    )
  ) %>%
  config(scrollZoom = TRUE, modeBarButtonsToAdd = list('drawopenpath'))

# Display the Plotly plot
plot
```

## Column

### Row

```{r IVIS Images Processing}
# Define the base path to the processed images
base_path <- "data/imaging/processed"

# List all folders within the processed directory
folders <- list.dirs(base_path, full.names = TRUE, recursive = FALSE)

# Function to process PNG images in a folder and convert them to SVG
process_folder <- function(folder) {
  png_files <- list.files(folder, pattern = "\\.PNG$", full.names = TRUE)
  
  # Read all PNG images at once and convert them to SVG format
  svg_images <- lapply(png_files, function(png_path) {
    # Read the image
    png_image <- image_read(png_path)
    
    # Trim the white space around the image
    trimmed_image <- image_trim(png_image)
    
    # Convert the trimmed image to SVG
    svg_image <- image_convert(trimmed_image, format = "svg")
    
    # Get image dimensions
    img_info <- image_info(svg_image)
    
    # Return a list with the SVG image and its dimensions
    list(svg_image = svg_image, width = img_info$width, height = img_info$height)
  })
  
  # Return named list of SVG images and their dimensions
  setNames(svg_images, basename(png_files))
}

# Process all folders sequentially and store the results in the plots list
plots <- setNames(lapply(folders, process_folder), basename(folders))

# Define a function to plot the SVG images without white space
plot_svg_image <- function(svg_image, img_width, img_height) {
  # Set up the plotting area with no margins
  par(mar = c(0, 0, 0, 0), oma = c(0, 0, 0, 0), xaxs = "i", yaxs = "i", bg = "white")
  
  # Create a blank plot with no axes
  plot(1, type = "n", xlim = c(1, img_width), ylim = c(1, img_height), xlab = "", ylab = "", axes = FALSE)
  
  # Plot the image with no white space
  rasterImage(as.raster(svg_image), 1, 1, img_width, img_height)
}
```

:::: {.column-screen}
::: {.panel-tabset}
```{r IVIS Images Loop}
#| results: asis
#| out-width: 100%
#| fig-format: svg
#| cache: FALSE

# Ensure plots are correctly looped and output without titles
# Cache processed images to avoid reprocessing
iwalk(plots, ~ {
  cat('## ', .y, '\n\n') # Create a tab for each folder
  
  iwalk(.x, ~ {
    plot_svg_image(.x$svg_image, .x$width, .x$height)
    cat('\n\n')
  })
})
```
:::
::::

### Row

```{r Mice Data}
#| title: "Mice Data"

# Load data
processed_data <- read.csv("data/processed/processed_data.csv")

# Process the data
mice_data <- processed_data %>%
  select(cage_number, id, ear_punch, trt, dob, imaging_date, total_flux, avg_radiance, death_date, manner_of_death) %>%
  arrange(desc(imaging_date)) %>%
  mutate(
    weeks_old = round(as.numeric(difftime(Sys.Date(), ymd(dob), units = "weeks")), 1),
    total_flux = sprintf("%.2e", total_flux),
    avg_radiance = sprintf("%.2e", avg_radiance)
  ) %>%
  select(cage_number, id, ear_punch, trt, imaging_date, total_flux, avg_radiance, weeks_old, death_date, manner_of_death) %>% 
  arrange(desc(imaging_date), id)

# Render the datatable with download button
datatable(mice_data, 
          extensions = 'Buttons',
          options = list(
            pageLength = 20,
            scrollX = TRUE,
            dom = 'Bfrtip',  # Buttons at the top
            buttons = c('csv')  # CSV download button
          )
)
```

# Subjects

## Column {.tabset}

### Mass

```{r Mass}
#| title: "Mass Over Time"

# Read the files into data frames
raw_mass <- read.csv("data/raw/raw_mass.csv")
processed_data <- read.csv("data/processed/processed_data.csv")

# Assuming you've handled duplicates in combined_data
combined_data <- raw_mass %>%
  inner_join(processed_data, by = "id")

# Sort data by mass_date from earliest to latest
combined_data <- combined_data %>%
  arrange(mass_date)

# Create a ggplot object with facetting by trt and grouping by id
p <- ggplot(combined_data, aes(x = mass_date, y = mass, color = factor(id), group = id)) +
  geom_line() +
  geom_point() +
  facet_wrap(~trt, scales = "free", ncol = 2)  # Adjust ncol as needed

# Convert ggplot to plotly
p <- ggplotly(p)

# Display the interactive plot
p
```

### Experimental Diagram

```{dot}
//| label: fig-simple
//| fig-cap: "Diagram showing the distribution of 25 mice following tumor injection. The mice are divided into five groups of 5 each: Treatment A, Treatment B, Treatment C, Treatment D, and Non-study."

digraph {
    A [label="25 Mice", shape=circle, style=filled];
    B [label="Tumor Injection", shape=circle, style=filled];

    A -> B;

    C [label="Treatment A", shape=circle, style=filled];
    D [label="Treatment B", shape=circle, style=filled];
    E [label="Treatment C", shape=circle, style=filled];
    F [label="Treatment D", shape=circle, style=filled];
    G [label="Non-study", shape=circle, style=filled];

    B -> C [label="5 mice"];
    B -> D [label="5 mice"];
    B -> E [label="5 mice"];
    B -> F [label="5 mice"];
    B -> G [label="5 mice"];
}
```

### Engraftment Status

```{r Engraftment Status}
#| title: "Engraftment Status"
#| results: asis

processed_data <- read.csv("data/processed/processed_data.csv")

# Precompute the order of 'id' based on 'total_flux' for the engraftment_imaging_date
order_by_flux <- processed_data %>%
  filter(imaging_date == engraftment_imaging_date) %>%
  arrange(desc(total_flux)) %>%
  pull(id)

# Filter the data for the plot
filtered_data <- processed_data %>%
  filter(imaging_date <= engraftment_imaging_date)

# Create the Plotly plot
plot_ly(
  filtered_data, 
  x = ~factor(id, levels = order_by_flux), 
  y = ~total_flux, 
  type = 'scatter', 
  mode = 'markers',
  color = ~factor(imaging_date),  # Correctly map color to imaging_date
  hoverinfo = "text", 
  text = ~paste(
    "ID:", id,
    "<br>Flux:", sprintf("%.2e", total_flux),
    "<br>Injection quality:", tumor_injection_quality
  )
) %>%
  layout(
    xaxis = list(title = "Mouse Number"),
    yaxis = list(title = "Total Flux", type = "log"),  # Log scale for y-axis
    legend = list(title = list(text = "Imaging Date")),
    template = "minimal"
  )

# Count the number of mice with total_flux > 1e6 and total_flux <= 1e6
mice_greater_than_1e6 <- processed_data %>%
  filter(imaging_date == engraftment_imaging_date) %>% 
  distinct(id, .keep_all = TRUE) %>%
  filter(total_flux > 1e6) %>%
  nrow()

mice_less_than_1e6 <- processed_data %>%
  filter(imaging_date == engraftment_imaging_date) %>% 
  distinct(id, .keep_all = TRUE) %>%
  filter(total_flux <= 1e6) %>%
  nrow()

# Get the specific mouse numbers for mice with total_flux <= 1e6
specific_mice_numbers <- processed_data %>% filter(total_flux <= 1e6) %>% select(id)

# Find the mouse numbers that are not engrafted, check if there are non-engrafted mice, and return the numbers
processed_data %>%
  filter(total_flux <= 1e6, imaging_date == engraftment_imaging_date) %>%
  pull(id) %>%
  unique() %>%
  { if (length(.) > 0) {
      cat("These mice are not engrafted because their total flux is less than 1e6:", paste(., collapse = ", "))
    } else {
      cat("All mice are engrafted because their total flux is greater than 1e6.")
    }
  }
```

The seed used is `r format(best_seed, scientific = FALSE)`.

```{r Treatment Assignment Plot From Engraftment Imaging Date}
#| title: "Treatment Assignment"
#| results: asis

# Load data
processed_data <- read.csv("data/processed/processed_data.csv")

# Convert trt to factor with levels sorted by trt_factor
processed_data$trt <- factor(processed_data$trt, levels = unique(processed_data$trt[order(processed_data$trt_factor)]))

# Create the ggplot
plot <- ggplot(data = processed_data %>% filter(imaging_date == engraftment_imaging_date),
       aes(x = trt, y = total_flux, color = trt, label = id)) +
  geom_jitter(position = position_dodge2(width = 0.7), size = 3) +  # Decrease the width for less separation
  geom_text(position = position_dodge2(width = 0.7), vjust = -1, size = 3) +  # Adjust vjust to move the label up
  scale_color_manual(values = pal, breaks = unique(processed_data$trt)) +  # Define colors and arrange the order
  labs(x = "Treatment", y = "Flux [p/s]", color = "Treatment") +  # Rename the legend title
  theme_minimal()

# Display the plot
print(plot)
```

### Injections {.tabset}

#### Tumor

- Test

#### Treatment {.tabset}

##### Treatment A

- Test

##### Treatment B

- Test

##### Treatment C

- Test

##### Treatment D

- Test

## Column {.tabset}

### Current Status 

```{r Current Status by Cage and Treatment}
#| title: "Current Status"
#| results: asis

# Load data
processed_data <- read.csv("data/processed/processed_data.csv")

# Create a scatterplot for cage_number, trt, and status without overlap
scatterplot <- processed_data %>%
  arrange(manner_of_death) %>%  # Arrange data to ensure NA is at the end
  distinct(trt, id, .keep_all = TRUE) %>% 
  ggplot(aes(x = factor(cage_number), y = reorder(trt, -id))) +  # Use reorder to order trt by id
  geom_point(
    aes(color = factor(ifelse(is.na(manner_of_death) | manner_of_death == "", "Alive", "Dead"))),
    size = 3,
    position = position_dodge2(width = 0.5),  # Adjust width as needed
    alpha = 0.7
  ) +
  geom_text(
    aes(label = as.character(id), color = factor(ifelse(is.na(manner_of_death) | manner_of_death == "", "Alive", "Dead"))),
    position = position_dodge2(width = 0.5),  # Align with the jittered points
    vjust = -1,  # Adjust vertical position to add space
    size = 3
  ) +
  scale_color_manual(
    values = c("Dead" = "red", "Alive" = "green"),
    guide = guide_legend(title = "Status")
  ) +
  labs(x = "Cage Number", y = "Treatment", color = "Status") +
  theme_minimal() +
  theme(legend.position = "top", 
        axis.text.x = element_text(size = 12, margin = margin(0, 40, 0, 40))) +  # Remove angle and adjust size
  guides(color = "none") +  # Remove the legend for "Status"
  scale_x_discrete(breaks = unique(processed_data$cage_number))  # Set breaks for x-axis

print(scatterplot)
```

### Euthanasia Criteria

```{r Euthanasia Criteria Check}
#| title: "Euthanasia Criteria Check"

# Load data
processed_data <- read.csv("data/processed/processed_data.csv")

# Ensure imaging_date is in Date format if necessary
processed_data$imaging_date <- as.Date(processed_data$imaging_date, format = "%Y-%m-%d")

# Find the most recent imaging date
most_recent_imaging_date <- max(processed_data$imaging_date, na.rm = TRUE)

# Find high-flux mice (alive and meeting criteria)
high_flux_mice <- processed_data %>%
  filter(imaging_date == most_recent_imaging_date,
         total_flux >= 2e10,
         is.na(death_date) | death_date == "")

# Read and merge mass data
raw_mass <- read.csv("data/raw/raw_mass.csv")
processed_data <- left_join(processed_data, raw_mass, by = "id")

# Convert mass_date to Date format
processed_data$mass_date <- as.Date(processed_data$mass_date, format = "%Y-%m-%d")

# Check for any alive mice
if (any(is.na(processed_data$death_date) | processed_data$death_date == "")) {
  
  # Calculate mass loss
  mass_loss_mice <- processed_data %>%
    filter(!is.na(mass_date)) %>%
    group_by(id) %>%
    summarize(
      oldest_mass_date = min(mass_date, na.rm = TRUE),
      newest_mass_date = max(mass_date, na.rm = TRUE),
      .groups = 'drop'
    ) %>%
    mutate(
      days_between = as.numeric(difftime(newest_mass_date, oldest_mass_date, units = "days")),
      mass_loss_percentage = ifelse(days_between > 0, (days_between / as.numeric(oldest_mass_date)) * 100, NA)
    ) %>%
    filter(mass_loss_percentage >= 20) %>%
    select(id)
  
  # Mice to euthanize
  mice_to_euthanize <- unique(c(high_flux_mice$id, mass_loss_mice$id))

  if (length(mice_to_euthanize) > 0) {
    cat("With respect to IACUC protocol, euthanize the following mice:\n")
    if (nrow(high_flux_mice) > 0) cat("- High total flux:", paste(high_flux_mice$id, collapse = ", "), "\n")
    if (nrow(mass_loss_mice) > 0) cat("- Significant mass loss:", paste(mass_loss_mice$id, collapse = ", "), "\n")
  } else {
    cat("No mice meet euthanasia criteria.\n")
  }

} else {
  cat("All mice are deceased. No action needed.\n")
}
```

### Comments

- Lights in animal rooms are programmed for 12 hour (6:15AM/ 6:15PM) ON/OFF cycles.
- The recommended dry bulb temperature range for animal rooms is 68-74F, with an acceptable fluctuation range of (+/-2F).
- The recommended relative humidity (RH%) for animal rooms is 30-70%.

# Statistical Analyses 

## Row {.tabset}

```{r Descriptives}
#| title: "Descriptives"

processed_data <- read.csv("data/processed/processed_data.csv")

descriptives <- jmv::descriptives(
    formula = total_flux ~ imaging_date:trt,
    data = processed_data,
    desc = "rows",
    se = TRUE,
    ci = TRUE)

descriptives

# Check if save_output is equal to "y"
if (save_output == "y") {
  # Save descriptives as a .txt file
  capture.output(descriptives, file = "data/processed/descriptives.txt", append = TRUE)
}
```

```{r Generalized Linear Model}
#| title: "Generalized Linear Model"

# Load processed data
processed_data <- read.csv("data/processed/processed_data.csv")

# Log-transform total_flux to handle exponential growth
processed_data <- processed_data %>%
  mutate(log_total_flux = log(total_flux))

# Fit the GLM with a Gaussian family
m1 <- glm(log_total_flux ~ trt, data = processed_data, family = gaussian)

tbl_regression(m1, exponentiate = TRUE)
```

```{r Mixed-Effects Model}
#| title: "Mixed-Effects Model"

# Specify the width of the output so columns do not get pushed to a new line
options(width = 120)

# Read the processed data
processed_data <- read.csv("data/processed/processed_data.csv")

tryCatch(
  {
    # Log transformation of the outcome variable (if total_flux is log-transformed)
    processed_data$log_total_flux <- log(processed_data$total_flux)

    # Fit a mixed-effects model
    # Using (1 | subject) assuming 'subject' is a variable to account for random effects
    # Also, adding interaction term for imaging_date * trt to see treatment differences over time
    model <- lmer(log_total_flux ~ imaging_date * trt + (1|id), data = processed_data)

    # Display the summary of the model
    model_summary <- summary(model)
    print(model_summary)

    # If save_output is "y", save the results as a .txt file
    if (save_output == "y") {
      capture.output(model_summary, file = "data/processed/mixed_effects_model.txt", append = TRUE)
    }

    # Return the model summary
    model_summary

    # Compare the treatment levels and their interactions with imaging dates, adjusting for the random subject effect
    # Using emmeans for pairwise comparisons between treatment groups
    emms <- emmeans(model, ~ trt | imaging_date)

    # Adjust for multiple comparisons with Tukey method
    contrast_results <- contrast(emms, method = "pairwise", adjust = "tukey")
    print(contrast_results)

  },
  error = function(e) {
    if (grepl("incorrect number of dimensions", e$message)) {
      cat("Error: The data has incorrect dimensions for mixed-effects model analysis.\n")
    } else {
      cat("Error occurred during mixed-effects model analysis:\n")
      cat(e$message, "\n")
    }
  }
)
```