---
title: "mock_experiment_example"
author: "name"
logo: "https://as2.ftcdn.net/v2/jpg/02/33/12/47/1000_F_233124776_IL2jsHaRiYYgZK5X0rDAjKGz1XQmBleK.jpg"
nav-buttons:
- icon: github
  href: https://github.com/mmccoy-01/bioluminescent_imaging_experimental_template
- icon: linkedin
  href: https://www.linkedin.com/in/themichaelmccoy
format: 
  dashboard:
    orientation: columns
    theme:
      light: cerulean
      dark: darkly
server: shiny
---

```{r Setup}
#| context: setup

pkg_list <- c(
  "knitr", "tidyverse", "shiny", "magick", "rsvg", "DT",
  "scales", "plotly", "survival", "survminer", "jmv"
)

# Function to install and load packages
load_packages <- function(pkg_list) {
  for (pkg in pkg_list) {
    if (!require(pkg, character.only = TRUE)) {
      install.packages(pkg, dependencies = TRUE)
      library(pkg, character.only = TRUE)
    }
  }
}

load_packages(pkg_list)

# library(knitr) # for kable table formatting
# library(tidyverse) # tidyverse
# library(shiny) # shiny app functionality
# library(DT) # for rendering tables
# library(scales) # scale functions for customizing visualizations
# library(plotly) # interactive cursor friendly plots
# library(survival) # for survival curves
# library(survminer) # for survival curves
# library(jmv) # performing statistical analyses

#setwd(dirname(rstudioapi::getSourceEditorContext()$path))

# The user defines different variables and parameters that will be specific to the study.

best_seed <-  "4347"
number_of_groups <- 4
mice_per_group <- 5
filtered_mice <- setdiff(1:30, c(2, 7, 8, 14, 19)) # excluding 2, 7, 8, 14, 19

labels <- c("0" = "Non-study", 
            "1" = "Treatment A", 
            "2" = "Treatment B", 
            "3" = "Treatment C", 
            "4" = "Treatment D")

colors <- c("#000000", "#D32F2F", "#66BB6A", "#2E7D32", "#7B1FA2")

pal <- setNames(colors, labels)

# Define respective shapes for each label
shapes <- c("square",  # Non-study (0)
            "circle",  # Treatment A (1)
            "triangle-up",  # Treatment B (2)
            "diamond",  # Treatment C (3)
            "cross")  # Treatment D (4)

shapes <- setNames(shapes, labels)

# Link to organization logo
src <- "https://as2.ftcdn.net/v2/jpg/02/33/12/47/1000_F_233124776_IL2jsHaRiYYgZK5X0rDAjKGz1XQmBleK.jpg"

# Save descriptives and anova stat outputs as a .txt file? y or n
# Default is n to stop the .txt from constantly being overwritten when the .Rmd file is ran
save_output <- "n"
```

```{r Data Pre-Processing}
# Create 'processed_data' which will be one data frame that contains:
# 1. all of the imaging data across weeks by funneling all of the weeks' imaging data into one data frame.
# 2. all of the mass data across weeks.

# Read the 'raw_data.csv' file into a data frame
raw_data <- read.csv("data/raw/raw_data.csv")

# Set the file path
file_path <- "data/imaging/processed/"

# Get a list of all weeks' imaging data .csv files in the directory
csv_files <- list.files(file_path, pattern = "\\.csv$", full.names = TRUE)

# Function to read, process, and save each csv file as a data frame with the same name
read_process_save_csv <- function(file) {
  # Extract the file name without extension
  file_name <- tools::file_path_sans_ext(basename(file))
  
  # Read the csv file into a data frame with check.names = FALSE
  df <- read.csv(file, check.names = FALSE)
  
# Rename the last column header indirectly because otherwise, the exponent cannot be handled
  colnames(df)[4] <- "avg_radiance"

# Remove specified columns
columns_to_remove <- c("Image Number", "ROI", "Image Layer", "Stdev Radiance", "Min Radiance", "Max Radiance")
df <- df[, !colnames(df) %in% columns_to_remove]
  
# Rename columns
colnames(df)[colnames(df) == "ROI Label"] <- "id"
colnames(df)[colnames(df) == "Experiment"] <- "imaging_date"
colnames(df)[colnames(df) == "Total Flux [p/s]"] <- "total_flux"
  
  # Assign the processed data frame to a variable with the same name as the csv file
  assign(file_name, df, envir = .GlobalEnv)
}

# Use lapply() to read, process, and save each csv file
invisible(lapply(csv_files, read_process_save_csv))

# Combine all weeks' imaging data using do.call() and bind_rows()
invisible(imaging_data <- do.call(bind_rows, mget(tools::file_path_sans_ext(basename(csv_files)), envir = .GlobalEnv)))

# Arrange the imaging_data data frame by imaging_date and then id
imaging_data <- imaging_data %>%
  arrange(imaging_date, id)

# Combine 'imaging_data' with 'raw_data' to make processed_data
processed_data <- left_join(raw_data, imaging_data, by = "id")

# Write the 'processed_data' data frame to a CSV file
write_csv(processed_data, file = "data/processed/processed_data.csv")
```

```{r Treatment Assignment}
#| output: FALSE

# Using the already user-defined filtered_mice, randomly assign mice to treatment conditions so that each treatment condition has equivalent total_flux between treatments. All of the filtered/unassigned remaining mice are assigned to na which gets updated to trt_factor = 0 aka the non-study/expansion group.

# Load data
processed_data <- read.csv("data/processed/processed_data.csv")

filtered_data <- processed_data %>%
  filter(imaging_date == engraftment_imaging_date, id %in% filtered_mice) %>%
  distinct(id, .keep_all = TRUE) %>%
  arrange(total_flux)

# Define the assign_groups function
assign_groups <- function(data, num_groups, num_per_group) {
  # Create an empty vector to store group assignments
  trt <- integer(nrow(data))
  
  # Create a data frame to store mean total_flux for each group
  mean_total_flux <- data.frame(Group = 1:num_groups, Mean_Total_Flux = numeric(num_groups))
  
  # Shuffle the data to randomize assignments
  data <- data[sample(nrow(data)), ]
  for (i in 1:num_groups) {
    # Select a subset of data for each group
    group_data <- data[((i - 1) * num_per_group + 1):(i * num_per_group), ]
    
    # Calculate mean total_flux for the group
    mean_flux <- mean(group_data$total_flux)
    
    # Assign the group number to the trt column
    trt[((i - 1) * num_per_group + 1):(i * num_per_group)] <- i
    
    # Store the mean total_flux in the mean_total_flux data frame
    mean_total_flux[i, 2] <- mean_flux
  }
  
  # Add the trt column to the data frame
  data$trt <- trt
  
  # Return the data frame with group assignments
  return(list(Data = data, Mean_Total_Flux = mean_total_flux))
}

# Initialize variables to store the best seed and its corresponding variability
best_seed <- NULL
best_variability <- Inf

# Loop through the first 5000 seeds
# For the first run, you can cycle through 100,000 seeds instead, but it will take some time. The greater the loop number, the closer to the best randomization. After finding the best_seed, delete from here to here and manually input the best_seed in the 'user_defined_parameters' chunk



# here
for (seed in 1:5000) {
  set.seed(seed)
  
  # Call the function to assign groups using filtered_data
  result <- assign_groups(filtered_data, number_of_groups, mice_per_group)
  
  # Calculate the standard deviation of mean total_flux across groups
  variability <- sd(result$Mean_Total_Flux$Mean_Total_Flux)
  
  # Check if this seed has lower variability than the current best
  if (variability < best_variability) {
    best_variability <- variability
    best_seed <- seed
  }
}

# Print the seed with the least variability
cat("Seed with the least variability:", best_seed, "\n")

# here



set.seed(best_seed)

# Function to assign mice to groups
assign_groups <- function(data, num_groups, num_per_group) {
  # Create an empty vector to store group assignments
  trt_factor <- integer(nrow(data))
  
  # Create a data frame to store mean total_flux for each group
  mean_total_flux <- data.frame(Group = 1:num_groups, Mean_Total_Flux = numeric(num_groups))
  
  # Shuffle the data to randomize assignments
  data <- data[sample(nrow(data)), ]
  for (i in 1:num_groups) {
    # Select a subset of data for each group
    group_data <- data[((i - 1) * num_per_group + 1):(i * num_per_group), ]
    
    # Calculate mean total_flux for the group
    mean_flux <- mean(group_data$total_flux)
    
    # Assign the group number to the trt_factor column
    trt_factor[((i - 1) * num_per_group + 1):(i * num_per_group)] <- i
    
    # Store the mean total_flux in the mean_total_flux data frame
    mean_total_flux[i, 2] <- mean_flux
  }
  
  # Add the trt_factor column to the data frame
  data$trt_factor <- trt_factor
  
  # Return the data frame with group assignments
  return(list(Data = data, Mean_Total_Flux = mean_total_flux))
}

# Call the function to assign groups using filtered_data
result <- assign_groups(filtered_data, number_of_groups, mice_per_group)

# Add trt_factor and trt to processed_data data frame.
# NA trt_factor values become 0 and trt becomes Non-study
# Add trt_factor and trt to processed_data data frame
processed_data <- processed_data %>%
  left_join(result$Data %>% select(id, trt_factor), by = "id") %>%
  mutate(trt_factor = as.factor(ifelse(is.na(trt_factor), "0", trt_factor))) %>%
  select(id, trt_factor, everything()) %>%
  mutate(trt = factor(trt_factor, levels = names(labels), labels = labels)) %>%
  relocate(trt_factor, .before = trt_injection_vial) %>% 
  relocate(trt, .before = trt_injection_vial)
  
# EXAMPLE CODE FOR REPLACING id = 6 WITH ID = 23
# For cases where a mouse that has been imaged and assigned to a treatment and needs to be replaced 
#processed_data <- processed_data %>%
  #mutate(imaging_date = as.Date(imaging_date, format = "%Y/%m/%d")) %>%
  #mutate(
    #trt_factor = if_else(id == 23 & imaging_date > as.Date("2023-12-14"), first(trt_factor[id == 6]), trt_factor),
    #trt = if_else(id == 23 & imaging_date > as.Date("2023-12-14"), first(trt[id == 6]), trt)
  #)
  
# Write the 'processed_data' data frame to a CSV file
write_csv(processed_data, file = "data/processed/processed_data.csv")
```

# Data

## Column

### {.toolbar}

```{r Treatment Plot Sidebar}
selectInput("pdx", "PDX:",
            choices = unique(processed_data$tumor_injection),
            selected = unique(processed_data$tumor_injection)[1])
selectInput("y_axis", "Y-axis:",
            choices = c("Flux" = "total_flux", "Radiance" = "avg_radiance"),
            selected = "total_flux")
checkboxInput("include_non_study", "Include non-study mice", value = FALSE)
selectInput("calculation_type", "Calculation Type:",
            choices = c("Mean", "Median", "Individual"),
            selected = "Mean")
```

### Row {.tabset}

```{r Treatment Plot Shiny App Server}
#| context: server

# Load data
processed_data <- read.csv("data/processed/processed_data.csv") %>%
  mutate(days_from_trt = floor(as.numeric(difftime(imaging_date, as.Date(trt_injection_date[1], format = "%Y-%m-%d"), units = "days")))) %>% 
  relocate(days_from_trt, .before = imaging_date)

# Create reactive dataset based on PDX and toggle selection
selected_data <- reactive({
  data <- processed_data[processed_data$tumor_injection == input$pdx, ]
  if (!input$include_non_study) {
    data <- data[data$trt != "Non-study", ]
  }
  data
})

# Render Plotly scatter plot
output$scatter_plot <- renderPlotly({
  y_axis_title <- if (input$y_axis == "total_flux") "Flux [p/s]" else "Radiance [p/s/cm^2/sr]"
  y_axis_label <- if (input$y_axis == "total_flux") "Flux" else "Radiance"

  # Calculate values based on the selected calculation type
  if (input$calculation_type == "Individual") {
    p <- selected_data() %>%
      mutate(trt = reorder(trt, trt_factor)) %>%
      group_by(trt, id) %>%
      plot_ly(x = ~days_from_trt, y = ~get(input$y_axis),
              type = 'scatter', mode = 'lines+markers',
              color = ~trt, colors = pal,
              symbol = ~trt, symbols = shapes,  # Assign marker shapes here
              marker = list(size = 10),
              legendgroup = ~trt,
              name = ~trt,
              hoverinfo = "text",
              text = ~paste("Imaging Date: ", imaging_date, "<br>ID: ", id, "<br>", y_axis_label, ": ", sprintf("%.2e", get(input$y_axis)))) %>%
      layout(
        yaxis = list(
          type = "log",
          title = y_axis_title
        ),
        xaxis = list(
          type = "linear",
          title = "Days from Treatment",
          tickmode = "array",
          tickvals = c(unique(selected_data()$days_from_trt), as.numeric(as.Date(processed_data$tumor_injection_date[1], format = "%Y-%m-%d") - as.Date(processed_data$trt_injection_date[1], format = "%Y-%m-%d"))),
          ticktext = c(as.character(unique(selected_data()$days_from_trt)),
                       paste(as.numeric(as.Date(processed_data$tumor_injection_date[1], format = "%Y-%m-%d") - as.Date(processed_data$trt_injection_date[1], format = "%Y-%m-%d"))))
        ),
        showlegend = TRUE,
        legend = list(x = 1, y = 0.5, title = "Treatment"),
        images = list(
          source = src,
          xref = "paper",
          yref = "paper",
          x = 0,
          y = 1,
          sizex = 0.2,
          sizey = 0.2,
          opacity = 0.8
        ),
        shapes = list(
          list(type = "line", y0 = 0, y1 = 1, yref = "paper", x0 = as.numeric(as.Date(processed_data$tumor_injection_date[1], format = "%Y-%m-%d") - as.Date(processed_data$trt_injection_date[1], format = "%Y-%m-%d")), x1 = as.numeric(as.Date(processed_data$tumor_injection_date[1], format = "%Y-%m-%d") - as.Date(processed_data$trt_injection_date[1], format = "%Y-%m-%d")), line = list(color = "black", dash = "dot"))
        )
      ) %>%
      config(scrollZoom = TRUE, modeBarButtonsToAdd = list('drawopenpath'))
  } else {
    data_summary <- selected_data() %>%
      mutate(trt = reorder(trt, trt_factor)) %>%
      group_by(days_from_trt, trt, imaging_date) %>%
      summarise(y_value = ifelse(input$calculation_type == "Mean", mean(get(input$y_axis)),
                                 median(get(input$y_axis))))

    p <- data_summary %>%
      group_by(trt) %>%
      plot_ly(x = ~days_from_trt, y = ~y_value,
              type = 'scatter', mode = 'lines+markers',
              color = ~trt, colors = pal,
              symbol = ~trt, symbols = shapes,  # Assign marker shapes here
              marker = list(size = 10),
              legendgroup = ~trt,
              name = ~trt,
              hoverinfo = "text",
              text = ~paste("Imaging Date: ", imaging_date, "<br>", y_axis_label, ": ", sprintf("%.2e", y_value))) %>%
      layout(
        yaxis = list(
          type = "log",
          title = y_axis_title
        ),
        xaxis = list(
          type = "linear",
          title = "Days from Treatment",
          tickmode = "array",
          tickvals = c(unique(data_summary$days_from_trt), as.numeric(as.Date(processed_data$tumor_injection_date[1], format = "%Y-%m-%d") - as.Date(processed_data$trt_injection_date[1], format = "%Y-%m-%d"))),
          ticktext = c(as.character(unique(data_summary$days_from_trt)),
                       paste(as.numeric(as.Date(processed_data$tumor_injection_date[1], format = "%Y-%m-%d") - as.Date(processed_data$trt_injection_date[1], format = "%Y-%m-%d"))))
        ),
        showlegend = TRUE,
        legend = list(x = 1, y = 0.5, title = "Treatment"),
        images = list(
          source = src,
          xref = "paper",
          yref = "paper",
          x = 0,
          y = 1,
          sizex = 0.2,
          sizey = 0.2,
          opacity = 0.8
        ),
        shapes = list(
          list(type = "line", y0 = 0, y1 = 1, yref = "paper", x0 = as.numeric(as.Date(processed_data$tumor_injection_date[1], format = "%Y-%m-%d") - as.Date(processed_data$trt_injection_date[1], format = "%Y-%m-%d")), x1 = as.numeric(as.Date(processed_data$tumor_injection_date[1], format = "%Y-%m-%d") - as.Date(processed_data$trt_injection_date[1], format = "%Y-%m-%d")), line = list(color = "black", dash = "dot"))
        )
      ) %>%
      config(scrollZoom = TRUE, modeBarButtonsToAdd = list('drawopenpath'))
  }

  p
})

# Render data table
output$data <- renderTable({
  selected_data()
})
```

```{r Treatment Plot Output}
#| title: "Treatment Plot"

plotlyOutput("scatter_plot")
```

```{r Kaplan-Meier Curve}
#| title: "Kaplan-Meier Curve"
#| results: asis

# Load data
processed_data <- read.csv("data/processed/processed_data.csv") %>%
  distinct(id, trt, death_date, trt_injection_date) %>% 
  mutate(
    death_date = as.Date(death_date, format = "%Y-%m-%d"),
    trt_injection_date = as.Date(trt_injection_date, format = "%Y-%m-%d"),
    event = ifelse(!is.na(death_date), 1, 0),
    time = ifelse(!is.na(death_date), as.numeric(difftime(death_date, trt_injection_date, units = "days")), 
                  as.numeric(difftime(Sys.Date(), trt_injection_date, units = "days")))
  )

# Take absolute value of time to ensure positive values
processed_data$time <- abs(processed_data$time)

# Fit the survival curve
kmcurve <- survfit(Surv(time, event) ~ trt, data = processed_data)

# Plot the survival curve
ggsurvplot(kmcurve, data = processed_data, xlim = c(0, 60), break.x.by = 7, ylab = "", xlab = "",
           pval = TRUE,
           risk.table = TRUE,
           risk.table.title = "",
           legend.title = "",
           surv.scale = "percent",
           fill = pal,
           title = "",
           risk.table.height = 0.4)

# Survival by Mouse and by Treatment

# Read data
processed_data <- read.csv("data/processed/processed_data.csv")

# Calculate survival in days
processed_data$survival_days <- as.numeric(difftime(as.Date(processed_data$death_date), 
                                                    as.Date(processed_data$trt_injection_date), 
                                                    units = "days"))

# Function to create survival table
create_survival_table <- function(data, group_by_trt = FALSE) {
  if (group_by_trt) {
    table_data <- data %>%
      group_by(trt) %>%
      summarise(mean_survival_days = mean(survival_days, na.rm = TRUE),
                median_survival_days = median(survival_days, na.rm = TRUE),
                min_survival_days = min(survival_days, na.rm = TRUE),
                max_survival_days = max(survival_days, na.rm = TRUE))
  } else {
    table_data <- data %>%
      distinct(id, .keep_all = TRUE) %>%
      select(id, trt, survival_days)  # Include trt column for survival by mouse
  }
  
  return(table_data)
}

# Create survival table by group
survival_by_group <- create_survival_table(processed_data, group_by_trt = TRUE)

# Create survival table by ID
survival_by_id <- create_survival_table(processed_data, group_by_trt = FALSE)

# Print survival tables
cat("Survival by Group:\n")
kable(survival_by_group, format = "markdown")
cat("\n\n")
cat("Survival by ID:\n")
kable(survival_by_id, format = "markdown")

# Get the summary table
summary_table <- summary(kmcurve, times = seq(0, 60, 7))

# Convert summary table to a data.frame
summary_df <- as.data.frame(summary_table$table)

# Print the formatted summary table using kable
kable(summary_df, digits = 3, caption = "Kaplan-Meier Survival Curve Summary")
```

```{r Spleen Counts}
#| title: "Spleen Counts"

# Load the processed data
processed_data <- read.csv("data/processed/processed_data.csv") %>%
  distinct(id, trt, spleen_total_live_cell_count, number_of_spleen_cryovials, cryovial_spleen_cell_total, spleen_cell_viability, manner_of_death, death_date)

# Filter to keep only rows with non-zero spleen_total_live_cell_count
filtered_data <- processed_data %>%
  filter(spleen_total_live_cell_count > 0)

# Create the Plotly plot
plot <- plot_ly(
  data = filtered_data,
  x = ~id,
  y = ~spleen_total_live_cell_count,
  type = "bar",
  color = ~trt, 
  colors = pal,
  marker = list(line = list(width = 2)),  # Adjust the width of the bars
  hoverinfo = "text",
  text = ~paste(
    "ID: ", id,
    "<br>Total Live Spleen Count:", sprintf("%.2e", spleen_total_live_cell_count),
    "<br>Viability:", spleen_cell_viability,
    "<br>", number_of_spleen_cryovials, "cryovial(s) at", sprintf("%.2e", cryovial_spleen_cell_total), " cells each",
    "<br>Death date:", death_date,
    "<br>Manner of death:", manner_of_death
  )
) %>%
  layout(
    xaxis = list(
      title = "Mouse ID",
      tickvals = filtered_data$id,  # Show ticks only for IDs in filtered data
      ticktext = filtered_data$id   # Show tick labels corresponding to the IDs
    ),
    yaxis = list(title = "Spleen Total Live Cell Count"),
    images = list(
      source = src,  # Ensure 'src' is defined and points to a valid image
      xref = "paper",
      yref = "paper",
      x = 0,
      y = 1,
      sizex = 0.2,
      sizey = 0.2,
      opacity = 0.8
    )
  ) %>%
  config(scrollZoom = TRUE, modeBarButtonsToAdd = list('drawopenpath'))

# Display the Plotly plot
plot
```

## Column

### Row

```{r IVIS Images Processing}
# Define the base path to the processed images
base_path <- "data/imaging/processed"

# List all folders within the processed directory
folders <- list.dirs(base_path, full.names = TRUE, recursive = FALSE)

# Function to process PNG images in a folder and convert them to SVG
process_folder <- function(folder) {
  png_files <- list.files(folder, pattern = "\\.PNG$", full.names = TRUE)
  
  # Read all PNG images at once and convert them to SVG format
  svg_images <- lapply(png_files, function(png_path) {
    # Read and convert to SVG in one step
    svg_image <- image_convert(image_read(png_path), format = "svg")
    
    # Get image dimensions
    img_info <- image_info(svg_image)
    
    # Return a list with the SVG image and its dimensions
    list(svg_image = svg_image, width = img_info$width, height = img_info$height)
  })
  
  # Return named list of SVG images and their dimensions
  setNames(svg_images, basename(png_files))
}

# Process all folders sequentially and store the results in the plots list
plots <- setNames(lapply(folders, process_folder), basename(folders))

# Define a function to plot the SVG images
plot_svg_image <- function(svg_image, img_width, img_height) {
  par(mar = c(0, 0, 0, 0), oma = c(0, 0, 0, 0), xaxs = "i", yaxs = "i", bg = "white")
  plot(1, type = "n", xlim = c(1, img_width), ylim = c(1, img_height), xlab = "", ylab = "", axes = FALSE)
  rasterImage(as.raster(svg_image), 1, 1, img_width, img_height)
}
```

:::: {.column-screen}
::: {.panel-tabset}
```{r IVIS Images Loop}
#| results: asis
#| out-width: 100%
#| fig-format: svg
#| cache: FALSE

# Ensure plots are correctly looped and output without titles
# Cache processed images to avoid reprocessing
iwalk(plots, ~ {
  cat('## ', .y, '\n\n') # Create a tab for each folder
  
  iwalk(.x, ~ {
    plot_svg_image(.x$svg_image, .x$width, .x$height)
    cat('\n\n')
  })
})
```
:::
::::

### Row

```{r Study Mice Data}
# Load data
processed_data <- read.csv("data/processed/processed_data.csv")

# Select the desired columns and format trt
most_recent_data <- processed_data %>%
  filter(id %in% filtered_mice) %>%
  select(cage_number, id, ear_punch, trt, imaging_date, total_flux, avg_radiance, death_date, manner_of_death)

# Create a .csv file of current mice data with the most recent imaging_date
processed_data %>%
  select(cage_number, id, ear_punch, trt, imaging_date, total_flux, avg_radiance, death_date, manner_of_death) %>% 
  group_by(id) %>%
  arrange(desc(imaging_date)) %>%
  slice(1) %>%  # Keep only the rows with the most recent imaging_date for each id
  select(cage_number, id, ear_punch, trt, imaging_date, total_flux, avg_radiance, death_date, manner_of_death) %>%
  write.csv(file = "data/processed/current_mice_data.csv", row.names = FALSE)

# Create an interactive DataTable with initial sorting and exclude the ear_punch column
datatable(most_recent_data, 
          options = list(pageLength = 20, scrollX = TRUE, order = list(list(5, 'asc'), list(2, 'asc')),
          columnDefs = list(list(targets = 3, visible = FALSE))))
```

# Subjects

## Column {.tabset}

### Mass

```{r Mass}
#| title: "Mass Over Time"

# Read the files into data frames
raw_mass <- read.csv("data/raw/raw_mass.csv")
processed_data <- read.csv("data/processed/processed_data.csv")

# Assuming you've handled duplicates in combined_data
combined_data <- raw_mass %>%
  inner_join(processed_data, by = "id")

# Sort data by mass_date from earliest to latest
combined_data <- combined_data %>%
  arrange(mass_date)

# Create a ggplot object with facetting by trt and grouping by id
p <- ggplot(combined_data, aes(x = mass_date, y = mass, color = factor(id), group = id)) +
  geom_line() +
  geom_point() +
  facet_wrap(~trt, scales = "free", ncol = 2)  # Adjust ncol as needed

# Convert ggplot to plotly
p <- ggplotly(p)

# Display the interactive plot
p
```

### Engraftment Status

```{r Engraftment Status}
#| title: "Engraftment Status"
#| results: asis

processed_data <- read.csv("data/processed/processed_data.csv")

# Precompute the order of 'id' based on 'total_flux' for the engraftment_imaging_date
order_by_flux <- processed_data %>%
  filter(imaging_date == engraftment_imaging_date) %>%
  arrange(desc(total_flux)) %>%
  pull(id)

# Filter the data for the plot
filtered_data <- processed_data %>%
  filter(imaging_date <= engraftment_imaging_date)

# Create the Plotly plot
plot_ly(filtered_data, 
        x = ~factor(id, levels = order_by_flux), 
        y = ~total_flux, 
        type = 'scatter', 
        mode = 'markers',
        marker = list(color = ~factor(imaging_date), 
                      colors = color_palette),
        hoverinfo = "text", 
    text = ~paste(
    "ID:", id,
    "<br>Flux:", sprintf("%.2e", total_flux),
    "<br>Injection quality:", tumor_injection_quality
  )) %>%
  layout(
    xaxis = list(title = "Mouse Number"),
    yaxis = list(title = "Total Flux", type = "log"),  # Log scale for y-axis
    legend = list(title = list(text = "Imaging Date")),
    template = "minimal"
  )

# Count the number of mice with total_flux > 1e6 and total_flux <= 1e6
mice_greater_than_1e6 <- processed_data %>%
  filter(imaging_date == engraftment_imaging_date) %>% 
  distinct(id, .keep_all = TRUE) %>%
  filter(total_flux > 1e6) %>%
  nrow()

mice_less_than_1e6 <- processed_data %>%
  filter(imaging_date == engraftment_imaging_date) %>% 
  distinct(id, .keep_all = TRUE) %>%
  filter(total_flux <= 1e6) %>%
  nrow()

# Get the specific mouse numbers for mice with total_flux <= 1e6
specific_mice_numbers <- processed_data %>% filter(total_flux <= 1e6) %>% select(id)

# Create a table
table_data <- data.frame(
  "Engrafted" = mice_greater_than_1e6,
  "Not Engrafted" = mice_less_than_1e6
)

# Print the table
table_data

# Find the mouse numbers that are not engrafted, check if there are non-engrafted mice, and return the numbers
processed_data %>%
  filter(total_flux <= 1e6, imaging_date == engraftment_imaging_date) %>%
  pull(id) %>%
  unique() %>%
  { if (length(.) > 0) {
      cat("These mice are not engrafted because their total flux is less than 1e6:", paste(., collapse = ", "))
    } else {
      cat("All mice are engrafted because their total flux is greater than 1e6.")
    }
  }
```

Seed with the least variability: `r best_seed`

```{r Treatment Assignment Plot From Engraftment Imaging Date}
#| title: "Treatment Assignment"
#| results: asis

# Load data
processed_data <- read.csv("data/processed/processed_data.csv")

# Convert trt to factor with levels sorted by trt_factor
processed_data$trt <- factor(processed_data$trt, levels = unique(processed_data$trt[order(processed_data$trt_factor)]))

# Create the ggplot
plot <- ggplot(data = processed_data %>% filter(imaging_date == engraftment_imaging_date),
       aes(x = trt, y = total_flux, color = trt, label = id)) +
  geom_jitter(position = position_dodge2(width = 0.7), size = 3) +  # Decrease the width for less separation
  geom_text(position = position_dodge2(width = 0.7), vjust = -1, size = 3) +  # Adjust vjust to move the label up
  scale_color_manual(values = pal, breaks = unique(processed_data$trt)) +  # Define colors and arrange the order
  labs(x = "Treatment", y = "Flux [p/s]", color = "Treatment") +  # Rename the legend title
  theme_minimal()

# Display the plot
print(plot)
```

### Injections {.tabset}

#### Tumor

- Test

#### Treatment {.tabset}

##### Treatment A

- Test

##### Treatment B

- Test

##### Treatment C

- Test

##### Treatment D

- Test

## Column {.tabset}

### Current Status 

```{r Current Status by Cage and Treatment}
#| title: "Current Status"
#| results: asis

# Load data
processed_data <- read.csv("data/processed/processed_data.csv")

# Create a scatterplot for cage_number, trt, and status without overlap
scatterplot <- processed_data %>%
  arrange(manner_of_death) %>%  # Arrange data to ensure NA is at the end
  distinct(trt, id, .keep_all = TRUE) %>% 
  ggplot(aes(x = factor(cage_number), y = reorder(trt, -id))) +  # Use reorder to order trt by id
  geom_point(
    aes(color = factor(ifelse(is.na(manner_of_death) | manner_of_death == "", "Alive", "Dead"))),
    size = 3,
    position = position_dodge2(width = 0.5),  # Adjust width as needed
    alpha = 0.7
  ) +
  geom_text(
    aes(label = as.character(id), color = factor(ifelse(is.na(manner_of_death) | manner_of_death == "", "Alive", "Dead"))),
    position = position_dodge2(width = 0.5),  # Align with the jittered points
    vjust = -1,  # Adjust vertical position to add space
    size = 3
  ) +
  scale_color_manual(
    values = c("Dead" = "red", "Alive" = "green"),
    guide = guide_legend(title = "Status")
  ) +
  labs(x = "Cage Number", y = "Treatment", color = "Status") +
  theme_minimal() +
  theme(legend.position = "top", 
        axis.text.x = element_text(size = 12, margin = margin(0, 40, 0, 40))) +  # Remove angle and adjust size
  guides(color = "none") +  # Remove the legend for "Status"
  scale_x_discrete(breaks = unique(processed_data$cage_number))  # Set breaks for x-axis

print(scatterplot)
```

### Euthanasia Criteria

```{r Euthanasia Criteria Check}
#| title: "Euthanasia Criteria Check"

# Load data
processed_data <- read.csv("data/processed/processed_data.csv")

# Find the most recent imaging date
most_recent_imaging_date <- processed_data %>%
  filter(!is.na(imaging_date)) %>%
  summarize(most_recent = max(imaging_date, na.rm = TRUE)) %>%
  pull(most_recent)

# Find mice with total_flux >= 2e10 from the most recent imaging_date
high_flux_mice <- processed_data %>%
  filter(imaging_date == most_recent_imaging_date,
         total_flux >= 2e+10,
         death_date == "")

# Read the 'raw_mass.csv' file into a data frame
raw_mass <- read.csv("data/raw/raw_mass.csv")

# Combine 'raw_mass' with 'processed_data'
processed_data <- left_join(processed_data, raw_mass, by = "id")

# Check if all mice are dead based on the 'manner_of_death' column
any_alive <- !any(is.na(processed_data$death_date))

if (any_alive) {
  # Convert mass_date to Date format
  processed_data <- processed_data %>%
    mutate(mass_date = as.Date(mass_date, format = "%Y-%m-%d"))

  # Ensure that all relevant columns are present and correctly formatted
  if ("mass_date" %in% colnames(processed_data)) {
    # Find the oldest and newest mass_date for each mouse
    mass_date_summary <- processed_data %>%
      filter(!is.na(mass_date)) %>%
      group_by(id) %>%
      summarize(
        oldest_mass_date = min(mass_date, na.rm = TRUE),
        newest_mass_date = max(mass_date, na.rm = TRUE),
        .groups = 'drop'
      )

    # Calculate the mass loss percentage for each mouse
    mass_loss <- mass_date_summary %>%
      mutate(
        id = as.character(id),  # Convert id to character
        # Ensure that we calculate the difference in days between dates
        days_between = as.numeric(difftime(newest_mass_date, oldest_mass_date, units = "days")),
        # Assuming the oldest_mass_date is the baseline for loss percentage
        mass_loss_percentage = ifelse(days_between > 0, (days_between / as.numeric(oldest_mass_date)) * 100, NA)
      )

    # Find mice meeting the mass loss criterion (20% or more loss)
    mass_loss_mice <- mass_loss %>%
      filter(!is.na(oldest_mass_date), !is.na(newest_mass_date),  # Exclude mice with missing mass dates
             mass_loss_percentage >= 20) %>%
      select(id)

    # Combine the two sets of mice that meet either criterion
    mice_to_euthanize <- union(high_flux_mice$id, mass_loss_mice$id)

    # Check if there are any mice to euthanize based on either criterion
    if (length(mice_to_euthanize) > 0) {
      if (length(high_flux_mice$id) > 0) {
        cat("With respect to the IACUC protocol, you need to euthanize mouse number(s) meeting the following humane endpoint criteria:\n")
        cat("- Total flux greater than or equal to 2x10^10:", paste(high_flux_mice$id, collapse = ", "), "\n")
      }

      if (length(mass_loss_mice$id) > 0) {
        cat("- Mass loss of 20% or more:", paste(mass_loss_mice$id, collapse = ", "), "\n")
      }
    } else {
      cat("No mice meet the criteria for euthanasia.")
    }
  } else {
    cat("mass_date column is missing or not correctly formatted.")
  }
} else {
  cat("All mice are dead. No further action is required.")
}
```

### Comments

- Lights in animal rooms are programmed for 12 hour (6:15AM/ 6:15PM) ON/OFF cycles.
- The recommended dry bulb temperature range for animal rooms is 68-74F, with an acceptable fluctuation range of (+/-2F).
- The recommended relative humidity (RH%) for animal rooms is 30-70%.

# Statistical Analyses 

## Row {.tabset}

```{r Descriptives}
#| title: "Descriptives"

processed_data <- read.csv("data/processed/processed_data.csv")

descriptives <- jmv::descriptives(
    formula = total_flux ~ imaging_date:trt,
    data = processed_data,
    desc = "rows",
    se = TRUE,
    ci = TRUE)

descriptives

# Check if save_output is equal to "y"
if (save_output == "y") {
  # Save descriptives as a .txt file
  capture.output(descriptives, file = "data/processed/descriptives.txt", append = TRUE)
}
```

```{r ANOVA}
#| title: "ANOVA"

processed_data <- read.csv("data/processed/processed_data.csv")

tryCatch(
  {
    anova <- jmv::ANOVA(
      formula = total_flux ~ imaging_date + trt + imaging_date:trt,
      data = processed_data,
      effectSize = "eta",
      homo = TRUE,
      norm = TRUE,
      postHoc = ~ trt + imaging_date,
      postHocCorr = c("tukey", "bonf"),
      postHocES = "d",
      postHocEsCi = TRUE,
      emmPlots = FALSE
    )
    # Check if save_output is equal to "y"
if (save_output == "y") {
  # Save ANOVA results as a .txt file
  capture.output(anova, file = "data/processed/anova.txt", append = TRUE)
}

    # Display ANOVA results
    anova
  },
  error = function(e) {
    if (grepl("incorrect number of dimensions", e$message)) {
      cat("Error: The data has incorrect dimensions for ANOVA analysis.\n")
    } else {
      cat("Error occurred during ANOVA analysis:\n")
      cat(e$message, "\n")
    }
  }
)
```